(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2143],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return s},kt:function(){return d}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),c=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=c(e.components);return n.createElement(p.Provider,{value:r},e.children)},m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=o,f=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return t?n.createElement(f,l(l({ref:r},s),{},{components:t})):n.createElement(f,l({ref:r},s))}));function d(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=u;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=t[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2407:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return s}});var n=t(2122),o=t(9756),a=(t(7294),t(3905)),l={title:"interpolateColors()",id:"interpolate-colors"},i={unversionedId:"interpolate-colors",id:"interpolate-colors",isDocsHomePage:!1,title:"interpolateColors()",description:"Available from v2.0.3",source:"@site/docs/interpolate-colors.md",sourceDirName:".",slug:"/interpolate-colors",permalink:"/docs/interpolate-colors",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/interpolate-colors.md",version:"current",frontMatter:{title:"interpolateColors()",id:"interpolate-colors"},sidebar:"someSidebar",previous:{title:"interpolate()",permalink:"/docs/interpolate"},next:{title:"getInputProps()",permalink:"/docs/get-input-props"}},p=[{value:"Reference",id:"reference",children:[{value:"Params",id:"params",children:[]},{value:"Returns",id:"returns",children:[]}]},{value:"Example: interpolate colors",id:"example-interpolate-colors",children:[]},{value:"Example: interpolate <code>rgb</code> or <code>rgba</code> colors",id:"example-interpolate-rgb-or-rgba-colors",children:[]},{value:"Example: interpolate <code>hsl</code> or <code>hsla</code> colors",id:"example-interpolate-hsl-or-hsla-colors",children:[]},{value:"Example: interpolate color names",id:"example-interpolate-color-names",children:[]},{value:"See also",id:"see-also",children:[]}],c={toc:p};function s(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Available from v2.0.3")),(0,a.kt)("p",null,"Allows you to map a range of values to colors using a concise syntax."),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("h3",{id:"params"},"Params"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The input value."),(0,a.kt)("li",{parentName:"ol"},"The range of values that you expect the input to assume."),(0,a.kt)("li",{parentName:"ol"},"The range of output colors that you want the input to map to.")),(0,a.kt)("h3",{id:"returns"},"Returns"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"interpolateColors()")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"rgba")," color string. eg: ",(0,a.kt)("inlineCode",{parentName:"p"},"rgba(255, 100, 12, 1)")),(0,a.kt)("h2",{id:"example-interpolate-colors"},"Example: interpolate colors"),(0,a.kt)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"red"),". At frame 20, we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow"),"."),(0,a.kt)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion';\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['#ff0000', '#ffff00']\n); // rgba(255, 128, 0, 1)\n")),(0,a.kt)("h2",{id:"example-interpolate-rgb-or-rgba-colors"},"Example: interpolate ",(0,a.kt)("inlineCode",{parentName:"h2"},"rgb")," or ",(0,a.kt)("inlineCode",{parentName:"h2"},"rgba")," colors"),(0,a.kt)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"red")," (",(0,a.kt)("inlineCode",{parentName:"p"},"rgb(255, 0, 0)"),"). At frame 20, we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow")," (",(0,a.kt)("inlineCode",{parentName:"p"},"rgba(255, 255, 0)"),")."),(0,a.kt)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\n// RGB colors\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['rgb(255, 0, 0)', 'rgb(255, 255, 0)']\n); // rgba(255, 128, 0, 1)\n\n// RGBA colors\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['rgba(255, 0, 0, 1)', 'rgba(255, 255, 0, 0)']\n); // rgba(255, 128, 0, 0.5)\n")),(0,a.kt)("h2",{id:"example-interpolate-hsl-or-hsla-colors"},"Example: interpolate ",(0,a.kt)("inlineCode",{parentName:"h2"},"hsl")," or ",(0,a.kt)("inlineCode",{parentName:"h2"},"hsla")," colors"),(0,a.kt)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"red")," (",(0,a.kt)("inlineCode",{parentName:"p"},"hsl(0, 100%, 50%)"),"). At frame 20, we want the color to be ",(0,a.kt)("inlineCode",{parentName:"p"},"yellow")," (",(0,a.kt)("inlineCode",{parentName:"p"},"hsl(60, 100%, 50%)"),")."),(0,a.kt)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n//hsl example\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['hsl(0, 100%, 50%)', 'hsl(60, 100%, 50%)']\n); // rgba(255, 128, 0, 1)\n\n//hsla example\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['hsla(0, 100%, 50%, 1)', 'hsla(60, 100%, 50%, 1)']\n); // rgba(255, 128, 0, 1)\n")),(0,a.kt)("h2",{id:"example-interpolate-color-names"},"Example: interpolate color names"),(0,a.kt)("p",null,"Interpolating CSS color names is also supported."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n")),(0,a.kt)("h2",{id:"see-also"},"See also"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/interpolate"},"interpolate()"))))}s.isMDXComponent=!0}}]);