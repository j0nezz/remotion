(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2143],{3905:function(e,r,n){"use strict";n.r(r),n.d(r,{MDXContext:function(){return m},MDXProvider:function(){return d},mdx:function(){return x},useMDXComponents:function(){return s},withMDXComponents:function(){return c}});var t=n(2784);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(){return(a=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function p(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=t.createContext({}),c=function(e){return function(r){var n=s(r.components);return t.createElement(e,a({},r,{components:n}))}},s=function(e){var r=t.useContext(m),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=s(e.components);return t.createElement(m.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},f=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=o,f=c["".concat(l,".").concat(d)]||c[d]||u[d]||a;return n?t.createElement(f,i(i({ref:r},m),{},{components:n})):t.createElement(f,i({ref:r},m))}));function x(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=f;var i={};for(var p in r)hasOwnProperty.call(r,p)&&(i[p]=r[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var m=2;m<a;m++)l[m]=n[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}f.displayName="MDXCreateElement"},52407:function(e,r,n){"use strict";n.r(r),n.d(r,{frontMatter:function(){return l},metadata:function(){return i},toc:function(){return p},default:function(){return c}});var t=n(22122),o=n(19756),a=(n(2784),n(3905)),l={title:"interpolateColors()",id:"interpolate-colors"},i={unversionedId:"interpolate-colors",id:"interpolate-colors",isDocsHomePage:!1,title:"interpolateColors()",description:"Available from v2.0.3",source:"@site/docs/interpolate-colors.md",sourceDirName:".",slug:"/interpolate-colors",permalink:"/docs/interpolate-colors",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/interpolate-colors.md",version:"current",frontMatter:{title:"interpolateColors()",id:"interpolate-colors"},sidebar:"someSidebar",previous:{title:"interpolate()",permalink:"/docs/interpolate"},next:{title:"getInputProps()",permalink:"/docs/get-input-props"}},p=[{value:"Reference",id:"reference",children:[{value:"Params",id:"params",children:[]},{value:"Returns",id:"returns",children:[]}]},{value:"Example: interpolate colors",id:"example-interpolate-colors",children:[]},{value:"Example: interpolate <code>rgb</code> or <code>rgba</code> colors",id:"example-interpolate-rgb-or-rgba-colors",children:[]},{value:"Example: interpolate <code>hsl</code> or <code>hsla</code> colors",id:"example-interpolate-hsl-or-hsla-colors",children:[]},{value:"Example: interpolate color names",id:"example-interpolate-color-names",children:[]},{value:"See also",id:"see-also",children:[]}],m={toc:p};function c(e){var r=e.components,n=(0,o.default)(e,["components"]);return(0,a.mdx)("wrapper",(0,t.default)({},m,n,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,(0,a.mdx)("em",{parentName:"p"},"Available from v2.0.3")),(0,a.mdx)("p",null,"Allows you to map a range of values to colors using a concise syntax."),(0,a.mdx)("h2",{id:"reference"},"Reference"),(0,a.mdx)("h3",{id:"params"},"Params"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"The input value."),(0,a.mdx)("li",{parentName:"ol"},"The range of values that you expect the input to assume."),(0,a.mdx)("li",{parentName:"ol"},"The range of output colors that you want the input to map to.")),(0,a.mdx)("h3",{id:"returns"},"Returns"),(0,a.mdx)("p",null,(0,a.mdx)("inlineCode",{parentName:"p"},"interpolateColors()")," returns a ",(0,a.mdx)("inlineCode",{parentName:"p"},"rgba")," color string. eg: ",(0,a.mdx)("inlineCode",{parentName:"p"},"rgba(255, 100, 12, 1)")),(0,a.mdx)("h2",{id:"example-interpolate-colors"},"Example: interpolate colors"),(0,a.mdx)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"red"),". At frame 20, we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"yellow"),"."),(0,a.mdx)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion';\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['#ff0000', '#ffff00']\n); // rgba(255, 128, 0, 1)\n")),(0,a.mdx)("h2",{id:"example-interpolate-rgb-or-rgba-colors"},"Example: interpolate ",(0,a.mdx)("inlineCode",{parentName:"h2"},"rgb")," or ",(0,a.mdx)("inlineCode",{parentName:"h2"},"rgba")," colors"),(0,a.mdx)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"red")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"rgb(255, 0, 0)"),"). At frame 20, we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"yellow")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"rgba(255, 255, 0)"),")."),(0,a.mdx)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\n// RGB colors\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['rgb(255, 0, 0)', 'rgb(255, 255, 0)']\n); // rgba(255, 128, 0, 1)\n\n// RGBA colors\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['rgba(255, 0, 0, 1)', 'rgba(255, 255, 0, 0)']\n); // rgba(255, 128, 0, 0.5)\n")),(0,a.mdx)("h2",{id:"example-interpolate-hsl-or-hsla-colors"},"Example: interpolate ",(0,a.mdx)("inlineCode",{parentName:"h2"},"hsl")," or ",(0,a.mdx)("inlineCode",{parentName:"h2"},"hsla")," colors"),(0,a.mdx)("p",null,"In this example, we are interpolating colors from red to yellow. At frame 0 (the start of the video), we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"red")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"hsl(0, 100%, 50%)"),"). At frame 20, we want the color to be ",(0,a.mdx)("inlineCode",{parentName:"p"},"yellow")," (",(0,a.mdx)("inlineCode",{parentName:"p"},"hsl(60, 100%, 50%)"),")."),(0,a.mdx)("p",null,"Using the following snippet, we can calculate the current color for any frame:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n//hsl example\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['hsl(0, 100%, 50%)', 'hsl(60, 100%, 50%)']\n); // rgba(255, 128, 0, 1)\n\n//hsla example\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['hsla(0, 100%, 50%, 1)', 'hsla(60, 100%, 50%, 1)']\n); // rgba(255, 128, 0, 1)\n")),(0,a.mdx)("h2",{id:"example-interpolate-color-names"},"Example: interpolate color names"),(0,a.mdx)("p",null,"Interpolating CSS color names is also supported."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-tsx"},"import {useCurrentFrame, interpolateColors} from 'remotion'\n\nconst frame = useCurrentFrame(); // 10\n\nconst color = interpolateColors(frame,\n  [0, 20],\n  ['red', 'yellow']\n); // rgba(255, 128, 0, 1)\n")),(0,a.mdx)("h2",{id:"see-also"},"See also"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/interpolate"},"interpolate()"))))}c.isMDXComponent=!0}}]);