(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5023],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=r,f=p["".concat(d,".").concat(m)]||p[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3775:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d},default:function(){return c}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),i={id:"data-fetching",title:"Data fetching"},l={unversionedId:"data-fetching",id:"data-fetching",isDocsHomePage:!1,title:"Data fetching",description:"One of the most groundbreaking things about Remotion is that you can fetch data from an API to display in your video like you would in a regular React project. It works almost like you are used to: You can use the fetch API to load the data in a useEffect and set a state.",source:"@site/docs/data-fetching.md",sourceDirName:".",slug:"/data-fetching",permalink:"/docs/data-fetching",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/data-fetching.md",version:"current",frontMatter:{id:"data-fetching",title:"Data fetching"},sidebar:"someSidebar",previous:{title:"Plain JavaScript",permalink:"/docs/javascript"},next:{title:"Encoding Guide",permalink:"/docs/encoding"}},d=[{value:"Telling Remotion to wait until the data is loaded",id:"telling-remotion-to-wait-until-the-data-is-loaded",children:[]},{value:"Caching",id:"caching",children:[]},{value:"Time limit",id:"time-limit",children:[]},{value:"Using <code>delayRender()</code> to calculate video metadata",id:"using-delayrender-to-calculate-video-metadata",children:[]},{value:"See also",id:"see-also",children:[]}],s={toc:d};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"One of the most groundbreaking things about Remotion is that you can fetch data from an API to display in your video like you would in a regular React project. It works almost like you are used to: You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," API to load the data in a ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," and set a state."),(0,o.kt)("h2",{id:"telling-remotion-to-wait-until-the-data-is-loaded"},"Telling Remotion to wait until the data is loaded"),(0,o.kt)("p",null,"There are two functions, ",(0,o.kt)("a",{parentName:"p",href:"/docs/delay-render"},(0,o.kt)("inlineCode",{parentName:"a"},"delayRender"))," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/continue-render"},(0,o.kt)("inlineCode",{parentName:"a"},"continueRender")),", which you can use to tell Remotion to not yet render the frame. If you want to asynchronously render a frame, you should call ",(0,o.kt)("inlineCode",{parentName:"p"},"delayRender()")," as soon as possible, before the window ",(0,o.kt)("inlineCode",{parentName:"p"},"onload")," event is fired. The function returns a handle that you need to give Remotion the green light to render later using ",(0,o.kt)("inlineCode",{parentName:"p"},"continueRender()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import {useEffect, useState} from 'react';\nimport {continueRender, delayRender} from 'remotion';\n\n\nexport const MyVideo = () => {\n  const [data, setData] = useState(null);\n  const [handle] = useState(() => delayRender());\n\n  const fetchData = async () => {\n    const response = await fetch('http://example.com/api');\n    const json = await response.json();\n    setData(json);\n\n    continueRender(handle);\n  }\n\n  useEffect(() => {\n    fetchData();\n  },\xa0[]);\n\n  return (\n    <div>\n      {data ? (\n        <div>This video has data from an API! {JSON.stringify(data)}</div>\n      ) : null}\n    </div>\n  );\n}\n\n")),(0,o.kt)("h2",{id:"caching"},"Caching"),(0,o.kt)("p",null,"It is important to know that in the render process, data fetching works on a per-frame basis, so for every frame, the page gets fully reloaded and screenshotted. You should consider caching the result of your API, to avoid rate-limits and also to speed up the render of your video. We have two suggestions on how to do that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"localStorage")," API to persist data after a network request and make a request only if the local storage is empty.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Fetch the data before the render, and store it as a JSON file, then import this JSON file."))),(0,o.kt)("h2",{id:"time-limit"},"Time limit"),(0,o.kt)("p",null,"You need to clear all handles created by ",(0,o.kt)("inlineCode",{parentName:"p"},"delayRender")," within 30 seconds after the page is opened. This limit is imposed by Puppeteer, but makes a lot of sense as going over this limit would make the rendering process massively slow."),(0,o.kt)("h2",{id:"using-delayrender-to-calculate-video-metadata"},"Using ",(0,o.kt)("inlineCode",{parentName:"h2"},"delayRender()")," to calculate video metadata"),(0,o.kt)("p",null,"You can also customize duration, frame rate and dimensions based on asynchronous data fetching:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"See: ",(0,o.kt)("a",{parentName:"strong",href:"dynamic-metadata"},"Dynamic duration, FPS & dimensions")))),(0,o.kt)("h2",{id:"see-also"},"See also"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/delay-render"},"delayRender()"))))}c.isMDXComponent=!0}}]);