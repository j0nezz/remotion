(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1226],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),d=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,f=m["".concat(u,".").concat(p)]||m[p]||c[p]||i;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4597:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return s}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={title:"getAudioData()",id:"get-audio-data"},l={unversionedId:"get-audio-data",id:"get-audio-data",isDocsHomePage:!1,title:"getAudioData()",description:"Part of the @remotion/media-utils package of helper functions.",source:"@site/docs/get-audio-data.md",sourceDirName:".",slug:"/get-audio-data",permalink:"/docs/get-audio-data",editUrl:"https://github.com/JonnyBurger/remotion/edit/main/packages/docs/docs/get-audio-data.md",version:"current",frontMatter:{title:"getAudioData()",id:"get-audio-data"},sidebar:"someSidebar",previous:{title:"@remotion/gif",permalink:"/docs/gif"},next:{title:"getAudioDuration()",permalink:"/docs/get-audio-duration"}},u=[{value:"Arguments",id:"arguments",children:[{value:"<code>src</code>",id:"src",children:[]}]},{value:"Return value",id:"return-value",children:[]},{value:"Example",id:"example",children:[]},{value:"Caching behavior",id:"caching-behavior",children:[]},{value:"Alternatives",id:"alternatives",children:[]},{value:"See also",id:"see-also",children:[]}],d={toc:u};function s(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Part of the ",(0,i.kt)("inlineCode",{parentName:"em"},"@remotion/media-utils"))," package of helper functions."),(0,i.kt)("p",null,"Takes an audio ",(0,i.kt)("inlineCode",{parentName:"p"},"src"),", loads it and returns data and metadata for the specified source."),(0,i.kt)("h2",{id:"arguments"},"Arguments"),(0,i.kt)("h3",{id:"src"},(0,i.kt)("inlineCode",{parentName:"h3"},"src")),(0,i.kt)("p",null,"A string pointing to an audio asset."),(0,i.kt)("h2",{id:"return-value"},"Return value"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Promise<AudioData>")," - object with information about the audio data:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channelWaveforms"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"Float32Array[]")," an array with waveform information for each channel."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sampleRate"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," How many samples per second each waveform contains."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"durationInSeconds"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," The duration of the audio in seconds."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"numberOfChannels"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"number")," The number of channels contained in the audio file. This corresponds to the length of the ",(0,i.kt)("inlineCode",{parentName:"li"},"channelWaveforms")," array."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resultId"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," Unique identifier of this audio data fetching call. Other functions can cache expensive operations if they get called with the same resultId multiple times."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isRemote"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"boolean")," Whether the audio was imported locally or from a different origin.")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {getAudioData} from '@remotion/media-utils';\nimport music from './music.mp3';\n\nawait getAudioData(music); /* {\n  channelWaveforms: [Float32Array(4410000), Float32Array(4410000)],\n  sampleRate: 44100,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 2,\n  resultId: \"0.432878981\",\n  isRemote: false\n} */\nawait getAudioData('https://example.com/remote-audio.aac'); /* {\n  channelWaveforms: [Float32Array(4800000)],\n  sampleRate: 48000,\n  durationInSeconds: 100.0000,\n  numberOfChannels: 1,\n  resultId: \"0.432324444\",\n  isRemote: true\n} */\n")),(0,i.kt)("h2",{id:"caching-behavior"},"Caching behavior"),(0,i.kt)("p",null,"This function is memoizing the results it returns.\nIf you pass in the same argument to ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," multiple times, it will return a cached version from the second time on, regardless of if the file has changed. To clear the cache, you have to reload the page."),(0,i.kt)("h2",{id:"alternatives"},"Alternatives"),(0,i.kt)("p",null,"If you need only the duration, prefer ",(0,i.kt)("a",{parentName:"p",href:"get-audio-duration"},(0,i.kt)("inlineCode",{parentName:"a"},"getAudioDuration()"))," which is faster because it doesn't need to read waveform data."),(0,i.kt)("p",null,"Use the ",(0,i.kt)("a",{parentName:"p",href:"use-audio-data"},(0,i.kt)("inlineCode",{parentName:"a"},"useAudioData()"))," helper hook to not have to do state management yourself and to wrap the call in ",(0,i.kt)("a",{parentName:"p",href:"delay-render"},(0,i.kt)("inlineCode",{parentName:"a"},"delayRender()")),"."),(0,i.kt)("h2",{id:"see-also"},"See also"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/using-audio"},"Using audio")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/audio-visualization"},"Audio visualization")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/audio"},(0,i.kt)("inlineCode",{parentName:"a"},"<Audio/>"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/visualize-audio"},(0,i.kt)("inlineCode",{parentName:"a"},"visualizeAudio()")))))}s.isMDXComponent=!0}}]);